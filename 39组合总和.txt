func combinationSum(candidates []int, target int) [][]int {
	var ans [][]int
	var path []int
	var curSum int
	var backtrack func(startIndex int)
	backtrack = func(startIndex int) {
		if curSum > target {
			return
		}
		if curSum == target {
			temp := append([]int{}, path...)
			ans = append(ans, temp)
			return
		}
		//不能用defer,多个迭代的状态会相互干扰
		//for循环执行i=1迭代时仍然保留着i=0的影响
		//因为defer的恢复动作没有在每次迭代结束时立即执行，而是延迟到整个函数返回后才执行
		for i := startIndex; i < len(candidates); i++ {
			path = append(path, candidates[i])
			curSum += candidates[i]
			backtrack(i)
			curSum -= candidates[i]
			path = path[:len(path)-1]
		}
	}
	backtrack(0)
	return ans
}