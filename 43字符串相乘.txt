func multiply(num1 string, num2 string) string {
	var ans string
	length1, length2, length3 := len(num1), len(num2), len(num1)+len(num2)
	A, B, C := make([]int, length1), make([]int, length2), make([]int, length3)
	/*先不进位，占好位置后，再进位
	                  A2     A1   A0
	                   1     2     3
	                  B2     B1   B0
	   *               4     5     6
	     --------------------------
	                   6     12    18
	             5     10    15
	        4    8     12
	     ---------------------------
	  =     4    13    28    27    18
	     ---------------------------
	       4+1  3+2+1  8+2   7+1    8
	   C5   C4   C3    C2    C1    C0
	    0    5    6     0     8     8
	*/
	//要从低位3、6开始放到数组的[0]位置
	//因为后面是从低位18到高位进位
	for i := range length1 {
		A[length1-1-i] = int(num1[i] - '0')
	}
	for i := range length2 {
		B[length2-1-i] = int(num2[i] - '0')
	}
	for i := range length1 {
		for j := range length2 {
			C[i+j] += A[i] * B[j]
		}
	}
	var carry int
	for i := range length3 {
		sum := C[i] + carry
		C[i] = sum % 10
		carry = sum / 10
	}
	//C5   C4   C3    C2    C1    C0
	//0    5    6     0     8     8
	//最高位可能是0，要找到首个非0的位置k(这里指从C5的0到C4的5)
	k := len(C) - 1
	//k >= 0 × 只有一个0，不用跳过，比如0*0=0
	for k > 0 && C[k] == 0 {
		k--
	}
	for k >= 0 {
		ans += strconv.Itoa(C[k])
		k--
	}
	return ans
}