/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func mergeKLists(lists []*ListNode) *ListNode {
	var ans *ListNode
	var mergeTwoLists func(list1, list2 *ListNode) *ListNode
	mergeTwoLists = func(list1, list2 *ListNode) *ListNode {
		//用户定义的类型不会自动初始化
		//var dummyHead *ListNode ×
		//cur = dummyHead = nil
		//cur.Next = nil.Next 访问空指针
		dummyHead := &ListNode{}
		//cur = dummyHead = &ListNode{Val: 0, Next: nil}
		cur := dummyHead
		for list1 != nil && list2 != nil {
			if list1.Val < list2.Val {
				cur.Next = list1
				cur = cur.Next
				list1 = list1.Next
			} else {
				cur.Next = list2
				cur = cur.Next
				list2 = list2.Next
			}
		}
		for list1 != nil {
			cur.Next = list1
			cur = cur.Next
			list1 = list1.Next
		}
		for list2 != nil {
			cur.Next = list2
			cur = cur.Next
			list2 = list2.Next
		}
		return dummyHead.Next
	}
	for i := range lists {
		ans = mergeTwoLists(ans, lists[i])
	}
	return ans
}