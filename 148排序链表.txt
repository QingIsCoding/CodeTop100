/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
// 自底向上归并排序
func sortList(head *ListNode) *ListNode {
	var mergeTwoLists func(head1, head2 *ListNode) *ListNode
	mergeTwoLists = func(head1, head2 *ListNode) *ListNode {
		dummyHead := &ListNode{}
		cur := dummyHead
		for head1 != nil && head2 != nil {
			if head1.Val < head2.Val {
				cur.Next = head1
				cur = cur.Next
				head1 = head1.Next
			} else {
				cur.Next = head2
				cur = cur.Next
				head2 = head2.Next
			}
		}
		for head1 != nil {
			cur.Next = head1
			cur = cur.Next
			head1 = head1.Next
		}
		for head2 != nil {
			cur.Next = head2
			cur = cur.Next
			head2 = head2.Next
		}
		return dummyHead.Next
	}
	var length int
	for node := head; node != nil; node = node.Next {
		length++
	}
	dummyHead := &ListNode{Next: head}
	//head1...head2...next...
	for subLength := 1; subLength < length; subLength *= 2 {
		pre, cur := dummyHead, dummyHead.Next
		for cur != nil {
			head1 := cur
			for i := 1; i < subLength && cur != nil; i++ {
				cur = cur.Next
			}
			//-1->5->3->4->0
			//(-1->5)->(3->4)->0
			//(-1->3->4->5)->0
			//此时subLength=2,cur指向0
			var head2 *ListNode
			if cur != nil {
				head2 = cur.Next
				cur.Next = nil
			}
			cur = head2
			for i := 1; i < subLength && cur != nil; i++ {
				cur = cur.Next
			}
			var next *ListNode
			if cur != nil {
				next = cur.Next
				cur.Next = nil
			}
			cur = next
			pre.Next = mergeTwoLists(head1, head2)
			for pre.Next != nil {
				pre = pre.Next
			}
		}
	}
	return dummyHead.Next
}