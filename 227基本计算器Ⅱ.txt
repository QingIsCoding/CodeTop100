//https://www.acwing.com/video/1596/
// 宫水三叶【宫水三叶】使用「双栈」解决「究极表达式计算」问题
func calculate(s string) int {
	s = strings.ReplaceAll(s, " ", "")
	var numStack []int
	var opStack []byte
	priority := map[byte]int{
		'+': 1,
		'-': 1,
		'*': 2,
		'/': 2,
	}
	eval := func() {
		b := numStack[len(numStack)-1]
		numStack = numStack[:len(numStack)-1]
		a := numStack[len(numStack)-1]
		numStack = numStack[:len(numStack)-1]
		op := opStack[len(opStack)-1]
		opStack = opStack[:len(opStack)-1]
		switch op {
		case '+':
			numStack = append(numStack, a+b)
		case '-':
			numStack = append(numStack, a-b)
		case '*':
			numStack = append(numStack, a*b)
		case '/':
			numStack = append(numStack, a/b)
		}
	}
	//不能用for i, ch := range s {}
	//因为range在每个循环步骤中都会重新设置i的值
	//导致后面的i = j - 1这一行代码并不会改变下一次迭代中的i
	for i := 0; i < len(s); i++ {
		//数字的情况
		if unicode.IsDigit(rune(s[i])) {
			j, num := i, 0
			for j < len(s) && unicode.IsDigit(rune(s[j])) {
				num = 10*num + int(s[j]-'0')
				j++
			}
			numStack = append(numStack, num)
			//s[i,j]是一整个数字,j++后，i先变成j-1，在for循环的i++再变成j
			//也就是i++后，i指向整个数字的后面一个字符
			i = j - 1
			//else:运算符的情况
		} else {
			//在运算符放入之前先把栈内可以算的都算掉
			//只有栈内运算符比当前运算符优先级高/相等，才进行运算
			for len(opStack) > 0 && priority[opStack[len(opStack)-1]] >= priority[s[i]] {
				eval()
			}
			opStack = append(opStack, s[i])
		}
	}
	for len(opStack) > 0 {
		eval()
	}
	return numStack[0]
}