// https://www.acwing.com/video/2021/
func subarraySum(nums []int, k int) int {
	var ans, prefixSum int
	prefixSumMap := map[int]int{0: 1}
	for i := 0; i < len(nums); i++ {
		//prefixSum = nums[0]+...+nums[i]
		prefixSum += nums[i]
		/*
			prefixSumMap[prefixSum]++
			ans += prefixSumMap[prefixSum-k]
			不能调换顺序，确保ans中累加的是旧的计数
			k=0时会多加上初始状态的prefixSumMap[1-0]=1
			prefixSum-k        +                   k   =   prefixSum
			类似于爬楼梯，可以由prefixSum-k(prefixSumMap[prefixSum-k]种情况)+k得到prefixSum

			输入 nums = [1], k = 0
			输出 1
			预期结果 0
		*/
		ans += prefixSumMap[prefixSum-k]
		prefixSumMap[prefixSum]++
	}
	return ans
}