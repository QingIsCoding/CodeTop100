func longestValidParentheses(s string) int {
	//栈底stack[0]最后一个没有被匹配的右括号的下标
	//除了栈底，栈的其它元素都是待匹配的左括号
	//例如:"()(()))"
	//当左括号匹配光时，栈需要留一个垫底的参照物，用于计算一段连续的有效长度
	var ans int
	//在s前面假装加一个右括号
	//防止情况:栈为空时，遇到右括号，从一个空栈中弹出元素
	stack := []int{-1}
	for i := range s {
		if s[i] == '(' {
			stack = append(stack, i)
			//遇到右括号时
			//1.要么是置换栈底的右括号成为新的唯一右括号
			//2.要么是匹配掉栈顶的左括号
		} else {
			if len(stack) == 1 {
				stack[0] = i
			} else {
				stack = stack[:len(stack)-1]
				ans = max(ans, i-stack[len(stack)-1])
			}
		}
	}
	return ans
}